# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  batch: true
  branches:
    include:
    - '*'
    exclude:
    - gh-pages

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'Windows-latest'

    variables:
      solution: '**/src/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1'
      inputs:
        packageType: sdk
        version: 3.1.100

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '$(solution)'
        arguments: '--configuration Debug /p:Platform="$(buildPlatform)" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) /p:Platform="$(buildPlatform)"'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **\bin\$(buildConfiguration)\*.nupkg
          **\coverage.*
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'src/**/coverage.*.cobertura.xml'
        failIfCoverageEmpty: true

    - powershell: |
        choco install docfx -y
        docfx doc/docfx.json
        if ($lastexitcode -ne 0){
          throw ("Error generating docfx document")
        }
      displayName: "docfx build"

    - task: CopyFiles@2
      displayName: 'Copy generated documentation to: $(Build.ArtifactStagingDirectory)/site'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/doc/_site'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/site'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

    - powershell: |
        # Create a branch to work in
        git checkout -b docfx
        # Remove the .gitignore to make sure this doesn't cause issues
        del $(System.DefaultWorkingDirectory)/.gitignore
        # Add all the files from the generated document
        git add $(System.DefaultWorkingDirectory)/doc/_site && git commit -m "Generated documentation for $env:Build.BuildNumber"
        # create a local gh-pages branch containing the splitted output folder
        git subtree split --prefix doc/_site -b gh-pages
        # force the push of the gh-pages branch to the remote gh-pages branch at origin
        git push -f origin gh-pages:gh-pages
      condition: ne(variables['Build.Reason'], 'PullRequest')

- stage: Deploy
  jobs:
  - deployment: DeployNuGet
    pool:
      vmImage: 'Windows-latest'

    environment: 'NuGet'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.4.0'
            inputs:
              versionSpec: 5.4.0
              checkLatest: true

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/drop/*.nupkg;!$(Pipeline.Workspace)/drop/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Dapplo NuGet push'
